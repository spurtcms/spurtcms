package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"spurt-cms/graphql/controller"
	"spurt-cms/graphql/graph"
	"spurt-cms/graphql/model"
)

// UpdateEntryViewCount is the resolver for the UpdateEntryViewCount field.
func (r *mutationResolver) UpdateEntryViewCount(ctx context.Context, id *int, slug *string) (*model.CountUpdate, error) {
	return controller.UpdateEntryViewCount(ctx, id, slug)
}

// EntrySaveUpdate is the resolver for the EntrySaveUpdate field.
func (r *mutationResolver) EntrySaveUpdate(ctx context.Context, input model.EntrySave) (string, error) {
	return controller.EntrySaveUpdate(ctx, &input)
}

// ChannelList is the resolver for the ChannelList field.
func (r *queryResolver) ChannelList(ctx context.Context, filter *model.Filter, sort *model.Sort) (*model.ChannelDetails, error) {
	return controller.ChannelList(ctx, filter, sort)
}

// ChannelDetail is the resolver for the ChannelDetail field.
func (r *queryResolver) ChannelDetail(ctx context.Context, channelID *int, channelSlug *string, isActive *bool) (*model.Channel, error) {
	return controller.ChannelDetails(ctx, channelID, channelSlug, isActive)
}

// ChannelEntriesList is the resolver for the ChannelEntriesList field.
func (r *queryResolver) ChannelEntriesList(ctx context.Context, commonFilter *model.Filter, sort *model.Sort, entryFilter *model.EntriesFilter, additionalData *model.EntriesAdditionalData) (*model.ChannelEntryDetails, error) {
	return controller.ChannelEntriesList(ctx, commonFilter, sort, entryFilter, additionalData)
}

// ChannelEntryDetail is the resolver for the ChannelEntryDetail field.
func (r *queryResolver) ChannelEntryDetail(ctx context.Context, id *int, slug *string, additionalData *model.EntriesAdditionalData, channelID *int, memberID *int) (*model.ChannelEntries, error) {
	return controller.ChannelEntryDetail(ctx, id, slug, additionalData, channelID, memberID)
}

// TopAuthorsList is the resolver for the TopAuthorsList field.
func (r *queryResolver) TopAuthorsList(ctx context.Context, id *string) ([]*model.Author, error) {
	return controller.TopAuthorsList(ctx, id)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
